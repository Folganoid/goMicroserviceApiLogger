version: "3.9"

volumes:
    prometheus_data:
    ch_db:
    pgdb:
    minio_0:
      driver: local

networks:
  back-tier:

services:

  go:
    build: ./go
    ports:
      - "8000:8000"
    networks:
      - back-tier

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - go
    networks:
      - back-tier
    restart: always
    
  redis:
    image: redis
    networks:
     - back-tier

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
     - pgdb:/var/lib/postgresql/data
    networks:
     - back-tier

  sentry:
    image: sentry
    links:
     - redis
     - postgres
    ports:
     - 9010:9000
    networks:
     - back-tier
    environment:
      SENTRY_SECRET_KEY: 'AAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQ'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis

  cron:
    image: sentry
    links:
     - redis
     - postgres
    networks:
     - back-tier 
    command: "sentry run cron"
    environment:
      SENTRY_SECRET_KEY: 'AAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQ'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis

  worker:
    image: sentry
    links:
     - redis
     - postgres
    networks:
     - back-tier 
    command: "sentry run worker"
    environment:
      SENTRY_SECRET_KEY: 'AAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQ'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis    

  ch:
    build:
        context: .
        dockerfile: ch.Dockerfile
        cache_from:
            - yandex/clickhouse-server:latest
    ports:
        - "8123:8123"
    volumes:
        -  ch_db:/var/lib/clickhouse
    networks:
        - back-tier
    restart: always
    
  tabix:
    image: spoonest/clickhouse-tabix-web-client
    ports:
        - "8124:8124"
    networks:
        - back-tier
    depends_on:
        - ch
    restart: always
    
  minio:
    image: 'bitnami/minio:latest'
    ports:
      - '9002:9000'
      - '9001:9001'
    networks:
      - back-tier
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
    volumes:
      - 'minio_0:/data-0'